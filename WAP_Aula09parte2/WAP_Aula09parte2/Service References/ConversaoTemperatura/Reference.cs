//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WAP_Aula09parte2.ConversaoTemperatura {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://webservices.daehosting.com/temperature", ConfigurationName="ConversaoTemperatura.TemperatureConversionsSoapType")]
    public interface TemperatureConversionsSoapType {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        decimal CelciusToFahrenheit(decimal nCelcius);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> CelciusToFahrenheitAsync(decimal nCelcius);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        decimal FahrenheitToCelcius(decimal nFahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> FahrenheitToCelciusAsync(decimal nFahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        decimal WindChillInCelcius(decimal nCelcius, decimal nWindSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> WindChillInCelciusAsync(decimal nCelcius, decimal nWindSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        decimal WindChillInFahrenheit(decimal nFahrenheit, decimal nWindSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> WindChillInFahrenheitAsync(decimal nFahrenheit, decimal nWindSpeed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TemperatureConversionsSoapTypeChannel : WAP_Aula09parte2.ConversaoTemperatura.TemperatureConversionsSoapType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemperatureConversionsSoapTypeClient : System.ServiceModel.ClientBase<WAP_Aula09parte2.ConversaoTemperatura.TemperatureConversionsSoapType>, WAP_Aula09parte2.ConversaoTemperatura.TemperatureConversionsSoapType {
        
        public TemperatureConversionsSoapTypeClient() {
        }
        
        public TemperatureConversionsSoapTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TemperatureConversionsSoapTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureConversionsSoapTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureConversionsSoapTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal CelciusToFahrenheit(decimal nCelcius) {
            return base.Channel.CelciusToFahrenheit(nCelcius);
        }
        
        public System.Threading.Tasks.Task<decimal> CelciusToFahrenheitAsync(decimal nCelcius) {
            return base.Channel.CelciusToFahrenheitAsync(nCelcius);
        }
        
        public decimal FahrenheitToCelcius(decimal nFahrenheit) {
            return base.Channel.FahrenheitToCelcius(nFahrenheit);
        }
        
        public System.Threading.Tasks.Task<decimal> FahrenheitToCelciusAsync(decimal nFahrenheit) {
            return base.Channel.FahrenheitToCelciusAsync(nFahrenheit);
        }
        
        public decimal WindChillInCelcius(decimal nCelcius, decimal nWindSpeed) {
            return base.Channel.WindChillInCelcius(nCelcius, nWindSpeed);
        }
        
        public System.Threading.Tasks.Task<decimal> WindChillInCelciusAsync(decimal nCelcius, decimal nWindSpeed) {
            return base.Channel.WindChillInCelciusAsync(nCelcius, nWindSpeed);
        }
        
        public decimal WindChillInFahrenheit(decimal nFahrenheit, decimal nWindSpeed) {
            return base.Channel.WindChillInFahrenheit(nFahrenheit, nWindSpeed);
        }
        
        public System.Threading.Tasks.Task<decimal> WindChillInFahrenheitAsync(decimal nFahrenheit, decimal nWindSpeed) {
            return base.Channel.WindChillInFahrenheitAsync(nFahrenheit, nWindSpeed);
        }
    }
}
